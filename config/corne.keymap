/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            label = "Base";
            bindings = <
&kp TAB         &kp Q  &kp W  &kp E         &kp R  &kp T        &kp Y      &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp LEFT_SHIFT  &kp A  &kp S  &kp D         &kp F  &kp G        &kp H      &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LCTRL       &kp Z  &kp X  &kp C         &kp V  &kp B        &kp N      &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp ESC
                              &kp LEFT_ALT  &mo 1  &kp ENTER    &kp SPACE  &mo 2  &kp LGUI
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Lower";
            bindings = <
&kp TAB    &kp N1  &kp N2         &kp N3         &kp N4    &kp N5       &kp N6    &kp N7    &kp N8        &kp N9     &kp N0   &kp LEFT_BRACKET
&trans     &trans  &kp PAGE_DOWN  &kp PAGE_DOWN  &kp HOME  &kp END      &kp LEFT  &kp DOWN  &kp UP        &kp RIGHT  &kp F11  &kp F12
&kp LSHFT  &kp F1  &kp F2         &kp F3         &kp F4    &kp F5       &kp F6    &kp F7    &kp F8        &kp F9     &kp F10  &trans
                                  &kp LGUI       &trans    &kp SPACE    &kp RET   &trans    &kp LEFT_ALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |  ä  |  ö  |  ü  |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Raise";
            bindings = <
&kp GRAVE  &kp LS(NUMBER_1)      &kp LS(NUMBER_2)          &kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &kp LS(N5)       &kp LS(NUMBER_6)  &kp LS(NUMBER_7)   &kp LS(RIGHT_BRACKET)  &kp LS(NUMBER_8)  &kp LS(NUMBER_9)          &kp DELETE
&kp LCTRL  &kp RA(Q)             &kp MINUS                 &kp RA(E)         &kp LS(NUMBER_0)  &kp LS(MINUS)    &kp SLASH         &kp LS(NUMBER_0)   &kp RA(NUMBER_8)       &kp RA(NUMBER_9)  &kp RA(MINUS)             &kp LS(BACKSLASH)
&kp LSHFT  &kp NON_US_BACKSLASH  &kp LS(NON_US_BACKSLASH)  &kp RA(NUMBER_2)  &kp RA(NUMBER_3)  &kp EQUAL        &kp LS(SLASH)     &kp RIGHT_BRACKET  &kp RA(NUMBER_7)       &kp RA(NUMBER_0)  &kp RA(NON_US_BACKSLASH)  &kp RA(RIGHT_BRACKET)
                                                           &kp LGUI          &trans            &kp SPACE        &kp RET           &trans             &kp RALT
            >;
        };

        layer_3 {
            bindings = <
&trans      &trans        &trans        &trans        &trans        &trans          &trans             &trans           &trans      &trans  &trans     &kp LBKT
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE  &trans  &kp COLON  &kp SINGLE_QUOTE
&trans      &trans        &trans        &trans        &trans        &trans          &kp C_PLAY_PAUSE   &kp C_PREVIOUS   &kp C_NEXT  &trans  &trans     &trans
                                        &trans        &trans        &trans          &trans             &trans           &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        third {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
